// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fullcore/obit.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Obit struct {
	Did              string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	SerialNumberHash string `protobuf:"bytes,2,opt,name=serialNumberHash,proto3" json:"serialNumberHash,omitempty"`
	Manufacturer     string `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	PartNumber       string `protobuf:"bytes,4,opt,name=partNumber,proto3" json:"partNumber,omitempty"`
	Creator          string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner            string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature        string `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Obit) Reset()         { *m = Obit{} }
func (m *Obit) String() string { return proto.CompactTextString(m) }
func (*Obit) ProtoMessage()    {}
func (*Obit) Descriptor() ([]byte, []int) {
	return fileDescriptor_41eba775cd9fae31, []int{0}
}
func (m *Obit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Obit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Obit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Obit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Obit.Merge(m, src)
}
func (m *Obit) XXX_Size() int {
	return m.Size()
}
func (m *Obit) XXX_DiscardUnknown() {
	xxx_messageInfo_Obit.DiscardUnknown(m)
}

var xxx_messageInfo_Obit proto.InternalMessageInfo

func (m *Obit) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *Obit) GetSerialNumberHash() string {
	if m != nil {
		return m.SerialNumberHash
	}
	return ""
}

func (m *Obit) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Obit) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

func (m *Obit) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Obit) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Obit) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*Obit)(nil), "obadafoundation.fullcore.fullcore.Obit")
}

func init() { proto.RegisterFile("fullcore/obit.proto", fileDescriptor_41eba775cd9fae31) }

var fileDescriptor_41eba775cd9fae31 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xaf, 0xff, 0x54, 0xeb, 0x1b, 0x2a, 0xd3, 0xc1, 0x42, 0xc8, 0x82, 0x4e, 0x08,
	0x89, 0x64, 0x40, 0xbc, 0x00, 0x13, 0x13, 0x95, 0x18, 0xd9, 0xec, 0xc4, 0x49, 0x2d, 0x25, 0xbe,
	0xd1, 0x8d, 0x2d, 0xe0, 0x2d, 0x78, 0x2c, 0xc6, 0x4e, 0x88, 0x11, 0x25, 0x2f, 0x82, 0xe2, 0xa8,
	0x0d, 0x88, 0xed, 0xdc, 0xdf, 0x39, 0xe7, 0x0e, 0x87, 0x9e, 0xe4, 0xbe, 0x2c, 0x53, 0x40, 0x9d,
	0x80, 0x32, 0x2e, 0xae, 0x11, 0x1c, 0xb0, 0x0b, 0x50, 0x32, 0x93, 0x39, 0x78, 0x9b, 0x49, 0x67,
	0xc0, 0xc6, 0x87, 0xd0, 0x51, 0x9c, 0xae, 0x0b, 0x28, 0x20, 0xa4, 0x93, 0x5e, 0x0d, 0xc5, 0xcd,
	0x07, 0xa1, 0xd3, 0xad, 0x32, 0x8e, 0xad, 0xe8, 0x24, 0x33, 0x19, 0x27, 0xe7, 0xe4, 0x72, 0xf9,
	0xd8, 0x4b, 0x76, 0x45, 0x57, 0x8d, 0x46, 0x23, 0xcb, 0x07, 0x5f, 0x29, 0x8d, 0xf7, 0xb2, 0xd9,
	0xf1, 0x7f, 0xc1, 0xfe, 0xc3, 0xd9, 0x86, 0xfe, 0xaf, 0xa4, 0xf5, 0xb9, 0x4c, 0x9d, 0x47, 0x8d,
	0x7c, 0x12, 0x72, 0xbf, 0x18, 0x13, 0x94, 0xd6, 0x12, 0xdd, 0xd0, 0xe2, 0xd3, 0x90, 0xf8, 0x41,
	0x18, 0xa7, 0x8b, 0x14, 0xb5, 0x74, 0x80, 0x7c, 0x16, 0xcc, 0xc3, 0xc9, 0xd6, 0x74, 0x06, 0xcf,
	0x56, 0x23, 0x9f, 0x07, 0x3e, 0x1c, 0xec, 0x8c, 0x2e, 0x1b, 0x53, 0x58, 0xd9, 0x7f, 0xe7, 0x8b,
	0xe0, 0x8c, 0xe0, 0x6e, 0xfb, 0xde, 0x0a, 0xb2, 0x6f, 0x05, 0xf9, 0x6a, 0x05, 0x79, 0xeb, 0x44,
	0xb4, 0xef, 0x44, 0xf4, 0xd9, 0x89, 0xe8, 0xe9, 0xb6, 0x30, 0x6e, 0xe7, 0x55, 0x9c, 0x42, 0x95,
	0x84, 0xd9, 0xae, 0xc7, 0xdd, 0x92, 0xe3, 0xb8, 0x2f, 0xa3, 0x74, 0xaf, 0xb5, 0x6e, 0xd4, 0x3c,
	0x0c, 0x76, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x68, 0x87, 0xbd, 0x80, 0x01, 0x00, 0x00,
}

func (m *Obit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Obit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Obit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintObit(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintObit(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintObit(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PartNumber) > 0 {
		i -= len(m.PartNumber)
		copy(dAtA[i:], m.PartNumber)
		i = encodeVarintObit(dAtA, i, uint64(len(m.PartNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Manufacturer) > 0 {
		i -= len(m.Manufacturer)
		copy(dAtA[i:], m.Manufacturer)
		i = encodeVarintObit(dAtA, i, uint64(len(m.Manufacturer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SerialNumberHash) > 0 {
		i -= len(m.SerialNumberHash)
		copy(dAtA[i:], m.SerialNumberHash)
		i = encodeVarintObit(dAtA, i, uint64(len(m.SerialNumberHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintObit(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObit(dAtA []byte, offset int, v uint64) int {
	offset -= sovObit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Obit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovObit(uint64(l))
	}
	l = len(m.SerialNumberHash)
	if l > 0 {
		n += 1 + l + sovObit(uint64(l))
	}
	l = len(m.Manufacturer)
	if l > 0 {
		n += 1 + l + sovObit(uint64(l))
	}
	l = len(m.PartNumber)
	if l > 0 {
		n += 1 + l + sovObit(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovObit(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovObit(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovObit(uint64(l))
	}
	return n
}

func sovObit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObit(x uint64) (n int) {
	return sovObit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Obit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Obit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Obit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumberHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumberHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manufacturer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manufacturer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthObit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObit = fmt.Errorf("proto: unexpected end of group")
)
